

도커파일은 한 줄씩 **명령어(Instruction)**와 **인자(Arguments)**로 구성
대표적인 명령어


ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
✅  명령어	| 역할 | 예시
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
✔ FROM	            어떤 베이스 이미지를 쓸지 지정        [ FROM ubuntu:24.04 ]
✔ RUN	            명령 실행 (이미지 빌드 시)	                [ RUN apt-get update && apt-get install -y curl ]
✔ COPY	            로컬 파일을 이미지로 복사                [ COPY ./app /app ]
✔ ADD	            파일 복사 + URL/압축 해제 지원	    [ ADD https://example.com/file.tar.gz /tmp/ ]
✔ WORKDIR	    작업 디렉토리 변경                           [ WORKDIR /app ]
✔ CMD	            컨테이너가 실행될 때 기본 실행 명령 { CMD ["python3", "main.py"] }
✔ ENTRYPOINT	컨테이너 실행 시 고정 명령	            { ENTRYPOINT ["python3", "main.py"] }
✔ EXPOSE	        컨테이너가 열 포트를 선언                [ EXPOSE 8080 ]
✔ ENV	                환경변수 설정                                   [ ENV TZ=Asia/Seoul ]


👉 단순 예제
	# 1. 우분투 24.04 기반
	FROM ubuntu:24.04
	
	# 2. 필요한 패키지 설치
	RUN apt-get update && apt-get install -y python3 python3-pip
	
	# 3. 로컬 app 폴더를 /app 폴더에 복사
	COPY ./app /app
	
	# 4. 작업 디렉토리 설정
	WORKDIR /app
	
	# 5. requirements.txt 설치
	RUN pip3 install -r requirements.txt
	
	# 6. 컨테이너 시작 시 실행할 명령
	CMD ["python3", "main.py"]

👉 빌드 & 실행
	docker build -t myapp:1.0 .
	docker run -d --name myapp_container -p 8080:8080 myapp:1.0
		-d : 백그라운드 실행
		-p 8080:8080 : 호스트 8080 → 컨테이너 8080 포트 매핑

👉 작성 팁
	✔ 작은 이미지부터 시작: alpine 같은 경량 이미지로 불필요한 용량 줄이기
	✔ RUN 명령 최소화: 여러 명령을 &&로 묶어서 캐시 효율 증가
	✔ .dockerignore 사용: 불필요한 파일이 이미지에 복사되는 걸 방지
	✔ 명령 순서 최적화: 자주 바뀌는 파일은 Dockerfile 하단에 배치

	
	